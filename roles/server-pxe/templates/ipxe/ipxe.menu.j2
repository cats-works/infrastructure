#!ipxe

# This configuration is managed by Ansible
# Last Update: {{ ansible_date_time.iso8601 }}
# Do not make any manual edits they will be lost.

# Variables are specified in boot.ipxe.cfg

# Some menu defaults
set menu-timeout 5000
set submenu-timeout ${menu-timeout}
isset ${menu-default} || set menu-default exit

###################### MAIN MENU ####################################
:start
menu Network Boot Services (${archdisp} ${platform})
item --key x exit         Continue normal boot...
item --gap --             ------------------------- System installers ------------------------------
{% if "alpine" in pxe_distro %}
item --key a menu-alpine        Alpine Linux ...... -->
{% endif %}
{% if "debian" in pxe_distro  %}
item --key d menu-debian        Debian GNU/Linux .. -->
{% endif %}
{% if "fedora" in pxe_distro %}
iseq ${is64} true && item --key f menu-fedora        Fedora Linux ...... --> ||
{% endif %}
{% if "opensuse" in pxe_distro  %}
item --key s menu-opensuse      OpenSuSE .......... -->
{% endif %}
{% if "rocky" in pxe_distro  %}
iseq ${is64} true && item --key r menu-rocky         Rocky Linux ....... --> ||
{% endif %}
{% if "ubuntu" in pxe_distro  %}
iseq ${is64} true && item --key u menu-ubuntu        Ubuntu ............ --> ||
{% endif %}
{% if "windows" in pxe_distro %}
item --key w windows            Windows (${winver})
{% endif %}
item --gap --             ------------------------- Utilities / Advanced -------------------------------
{% if "windows" in pxe_distro %}
iseq ${is64} true && item dart                 Windows DaRT ||
{% endif %}

{% if "gparted" in pxe_distro %}
iseq ${pconly} true && item gparted           GParted Live ||
{% endif %}
iseq ${platform} efi && item memtest              Memory Test || 
iseq ${platform} efi && item efishell             EFI Shell || 

item --key c config       Configure iPXE settings
item shell                Drop to iPXE shell
item reboot               Reboot computer

choose --timeout ${menu-timeout} --default ${menu-default} selected || goto cancel
set menu-timeout 0
goto ${selected}

###################### HELPERS !! ####################################
:cancel
echo You cancelled the menu, dropping you to a shell

:shell
echo Type 'exit' to get the back to the menu
shell
set menu-timeout 0
set submenu-timeout 0
goto start

:failed
echo Booting failed, dropping to shell
goto shell

:reboot
reboot

:exit
exit

:config
config
goto start

:back
set submenu-timeout 0
clear submenu-default
goto start

###################### ALPINE MENU ####################################
{% if "alpine" in pxe_distro %}
:menu-alpine
menu Alpine Linux
item --key a alpine         Install Alpine Linux {{ alpine_stable_version }}
item --key a alpinevirt     Install Alpine Linux (Virtual Machine Kernel) {{ alpine_stable_version }}
item
item --key 0x08 back <-- Back to the main menu
iseq ${menu-default} menu-alpine && isset ${submenu-default} && goto menu-alpine-timed ||
choose selected && goto ${selected} || goto start
:menu-alpine-timed
choose --timeout ${submenu-timeout} --default ${submenu-default} selected && goto ${selected} || goto start

:alpine
echo Starting Alpine Linux {{ alpine_stable_version }} ${archrh} installer
kernel http://{{ pxe_server_hostname }}/distro/alpine-netboot-{{ alpine_stable_version }}-${archrh}/boot/vmlinuz-lts
initrd http://{{ pxe_server_hostname }}/distro/alpine-netboot-{{ alpine_stable_version }}-${archrh}/boot/initramfs-lts
imgargs vmlinuz-lts ip=dhcp modules=loop,squashfs,sd-mod,usb-storage alpine_repo=http://{{ pxe_server_hostname }}/distro/alpine-standard-{{ alpine_stable_version }}-${archrh}/apks/ modloop=http://{{ pxe_server_hostname }}/distro/alpine-netboot-{{ alpine_stable_version }}-${archrh}/boot/modloop-lts quiet
boot || goto failed
goto start
:alpinevirt
echo Starting Alpine Linux {{ alpine_stable_version }} VM ${archrh} installer
kernel http://{{ pxe_server_hostname }}/distro/alpine-netboot-{{ alpine_stable_version }}-${archrh}/boot/vmlinuz-virt
initrd http://{{ pxe_server_hostname }}/distro/alpine-netboot-{{ alpine_stable_version }}-${archrh}/boot/initramfs-virt
imgargs vmlinuz-virt ip=dhcp modules=loop,squashfs,sd-mod,usb-storage alpine_repo=http://{{ pxe_server_hostname }}/distro/alpine-virt-{{ alpine_stable_version }}-${archrh}/apks/ modloop=http://{{ pxe_server_hostname }}/distro/alpine-netboot-{{ alpine_stable_version }}-${archrh}/boot/modloop-virt quiet
boot || goto failed
goto start
{% endif %}

{% if "debian" in pxe_distro %}
###################### DEBIAN MENU ####################################
:menu-debian
menu Debian GNU/Linux
{% for version in pxe_debian_versions %}
item debian{{ version }}       Install Debian GNU/Linux {{ vars['debian_' + version + '_version'] }} ({{ version }})
{% endfor %}
item
item --key 0x08 back <-- Back to the main menu
iseq ${menu-default} menu-debian && isset ${submenu-default} && goto menu-debian-timed ||
choose selected && goto ${selected} || goto start
:menu-debian-timed
choose --timeout ${submenu-timeout} --default ${submenu-default} selected && goto ${selected} || goto start

{% for version in pxe_debian_versions %}
:debian{{ version }}
echo Starting Debian GNU/Linux {{ vars['debian_' + version + '_version'] }} ({{ version }}) ${archl} installer
kernel http://{{ pxe_server_hostname }}/distro/debian-netinst-bookworm-${archl}/debian-installer/${archl}/linux
initrd http://{{ pxe_server_hostname }}/distro/debian-netinst-bookworm-${archl}/debian-installer/${archl}/initrd.gz
imgargs linux fb=false vga=788 quiet
boot || goto failed
goto start
{% endfor %}
{% endif %}

{% if "rocky" in pxe_distro %}
###################### ROCKY MENU ####################################
:menu-rocky
menu Rocky Linux
{% for version in pxe_rocky_versions %}
item rocky{{ version }}        Install Rocky Linux {{ vars['rocky_' + version|string + '_version'] }} (text mode)
item rockygui{{ version }}     Install Rocky Linux {{ vars['rocky_' + version|string + '_version'] }} (GUI)
{% endfor %}
item
item --key 0x08 back <-- Back to the main menu
iseq ${menu-default} menu-rocky && isset ${submenu-default} && goto menu-rocky-timed ||
choose selected && goto ${selected} || goto start
:menu-rocky-timed
choose --timeout ${submenu-timeout} --default ${submenu-default} selected && goto ${selected} || goto start

{% for version in pxe_rocky_versions %}
:rocky{{ version }}
echo Starting Rocky Linux {{ vars['rocky_' + version|string + '_version'] }} ${archrh} text installer
kernel http://{{ pxe_server_hostname }}/distro/rocky-{{ vars['rocky_' + version|string + '_version'] }}-${archrh}/images/pxeboot/vmlinuz
initrd http://{{ pxe_server_hostname }}/distro/rocky-{{ vars['rocky_' + version|string + '_version'] }}-${archrh}/images/pxeboot/initrd.img
imgargs vmlinuz devfs=nomount quiet inst.repo=http://{{ pxe_server_hostname }}/distro/rocky-{{ vars['rocky_' + version|string + '_version'] }}-${archrh} devfs=nomount quiet inst.text
boot || goto failed
goto start
:rockygui{{ version }}
echo Starting Rocky Linux {{ vars['rocky_' + version|string + '_version'] }} ${archrh} GUI installer
kernel http://{{ pxe_server_hostname }}/distro/rocky-{{ vars['rocky_' + version|string + '_version'] }}-${archrh}/images/pxeboot/vmlinuz
initrd http://{{ pxe_server_hostname }}/distro/rocky-{{ vars['rocky_' + version|string + '_version'] }}-${archrh}/images/pxeboot/initrd.img
imgargs vmlinuz devfs=nomount quiet inst.repo=http://{{ pxe_server_hostname }}/distro/rocky-{{ vars['rocky_' + version|string + '_version'] }}-${archrh} devfs=nomount quiet
boot || goto failed
goto start
{% endfor %}

{% endif %}

{% if "fedora" in pxe_distro %}
###################### FEDORA MENU ####################################
:menu-fedora
menu Fedora Linux
{% for version in pxe_fedora_versions %}
item fedora{{ version }}        Install Fedora Linux {{ version }} (text mode)
item fedoragui{{ version }}     Install Fedora Linux {{ version }} (GUI)
{% endfor %}
item
item --key 0x08 back <-- Back to the main menu
iseq ${menu-default} menu-fedora && isset ${submenu-default} && goto menu-fedora-timed ||
choose selected && goto ${selected} || goto start
:menu-fedora-timed
choose --timeout ${submenu-timeout} --default ${submenu-default} selected && goto ${selected} || goto start

{% for version in pxe_fedora_versions %}
:fedora{{ version }}
echo Starting Fedora Linux {{ version }} ${archrh} text installer
kernel http://{{ pxe_server_hostname }}/distro/fedora-{{ version }}-${archrh}/images/pxeboot/vmlinuz
initrd http://{{ pxe_server_hostname }}/distro/fedora-{{ version }}-${archrh}/images/pxeboot/initrd.img
imgargs vmlinuz devfs=nomount quiet inst.repo=http://{{ pxe_server_hostname }}/distro/fedora-{{ version }}-${archrh} devfs=nomount quiet inst.text
boot || goto failed
goto start
:fedoragui{{ version }}
echo Starting Fedora Linux {{ version }} ${archrh} GUI installer
kernel http://{{ pxe_server_hostname }}/distro/fedora-{{ version }}-${archrh}/images/pxeboot/vmlinuz
initrd http://{{ pxe_server_hostname }}/distro/fedora-{{ version }}-${archrh}/images/pxeboot/initrd.img
imgargs vmlinuz devfs=nomount quiet inst.repo=http://{{ pxe_server_hostname }}/distro/fedora-{{ version }}-${archrh} devfs=nomount quiet
boot || goto failed
goto start
{% endfor %}
{% endif %}

{% if "ubuntu" in pxe_distro %}
###################### UBUNTU MENU ####################################
:menu-ubuntu
menu Ubuntu
{% for version in pxe_ubuntu_lts_versions %}
item ubuntu{{ version }}       Install Ubuntu LTS ({{ version }})
{% endfor %}
{% for version in pxe_ubuntu_interim_versions %}
item ubuntu{{ version }}       Install Ubuntu ({{ version }})
{% endfor %}
item
item --key 0x08 back <-- Back to the main menu
iseq ${menu-default} menu-ubuntu && isset ${submenu-default} && goto menu-ubuntu-timed ||
choose selected && goto ${selected} || goto start
:menu-ubuntu-timed
choose --timeout ${submenu-timeout} --default ${submenu-default} selected && goto ${selected} || goto start

{% for version in pxe_ubuntu_lts_versions %}
:ubuntu{{ version }}
echo Starting Ubuntu LTS {{ version }} ${archl} installer
kernel http://{{ pxe_server_hostname }}/distro/ubuntu-{{ vars['ubuntu_lts_' + version|string + '_version'] }}-live-server-${archl}/casper/vmlinuz
initrd http://{{ pxe_server_hostname }}/distro/ubuntu-{{ vars['ubuntu_lts_' + version|string + '_version'] }}-live-server-${archl}/casper/initrd
imgargs vmlinuz url=http://{{ pxe_server_hostname }}/linux/ubuntu-{{ vars['ubuntu_lts_' + version|string + '_version'] }}-live-server-${archl}.iso only-ubiquity ip=dhcp quiet
boot || goto failed
goto start
{% endfor %}
{% for version in pxe_ubuntu_interim_versions %}
:ubuntu{{ version }}
echo Starting Ubuntu {{ version }} ${archl} installer
kernel http://{{ pxe_server_hostname }}/distro/ubuntu-{{ version }}-live-server-${archl}/casper/vmlinuz
initrd http://{{ pxe_server_hostname }}/distro/ubuntu-{{ version }}-live-server-${archl}/casper/initrd
imgargs vmlinuz url=http://{{ pxe_server_hostname }}/linux/ubuntu-{{ version }}-live-server-${archl}.iso only-ubiquity ip=dhcp quiet
boot || goto failed
goto start
{% endfor %}
{% endif %}


{% if "opensuse" in pxe_distro %}
###################### OPENSUSE MENU ####################################
:menu-opensuse
menu OpenSuSE
{% for version in pxe_opensuse_leap_versions %}
item suse{{ version }}       Install OpenSuSE Leap ({{ version }})
{% endfor %}
item
item --key 0x08 back <-- Back to the main menu
iseq ${menu-default} menu-opensuse && isset ${submenu-default} && goto menu-opensuse-timed ||
choose selected && goto ${selected} || goto start
:menu-opensuse-timed
choose --timeout ${submenu-timeout} --default ${submenu-default} selected && goto ${selected} || goto start
{% for version in pxe_opensuse_leap_versions %}
:suse{{ version }}
echo Starting OpenSuSE Leap {{ version }} ${archrh} installer
{% if version|string|split|first|int <= 15 %}
iseq ${archrh} aarch64 && kernel http://{{ pxe_server_hostname }}/distro/openSUSE-Leap-{{ version }}-NET-${archrh}-Media/boot/${archrh}/linux || kernel http://{{ pxe_server_hostname }}/distro/openSUSE-Leap-{{ version }}-NET-${archrh}-Media/boot/${archrh}/loader/linux
iseq ${archrh} aarch64 && initrd http://{{ pxe_server_hostname }}/distro/openSUSE-Leap-{{ version }}-NET-${archrh}-Media/boot/${archrh}/initrd || initrd http://{{ pxe_server_hostname }}/distro/openSUSE-Leap-{{ version }}-NET-${archrh}-Media/boot/${archrh}/loader/initrd
imgargs linux install=http://download.opensuse.org/distribution/leap/{{ version }}/repo/oss/ addrepo=http://download.opensuse.org/distribution/leap/{{ version }}/repo/non-oss/ splash=silent vga=0x314 showopts
{% elif version|string|split|first|int >= 16 %}
set netsetup netsetup=hostip,gateway,nameserver hostip=${ip}/${prefix} gateway=${gateway} nameserver=${dns}
kernel http://{{ pxe_server_hostname }}/distro/Leap-{{ version }}-online-installer-${archrh}/boot/${archrh}/loader/linux 
initrd http://{{ pxe_server_hostname }}/distro/Leap-{{ version }}-online-installer-${archrh}/boot/${archrh}/loader/initrd
imgargs linux root=live:http://{{ pxe_server_hostname }}/linux/Leap-{{ version }}-online-installer-${archrh}.install.iso ${netsetup} 
{% else %}
{% endif %}
boot || goto failed
goto start
{% endfor %}

{% endif %}

{% if "gparted" in pxe_distro %}
:gparted
echo Starting GParted Live Partition Editor
kernel http://{{ pxe_server_hostname }}/distro/gparted-live-{{ gparted_live_version }}-amd64/live/vmlinuz
initrd http://{{ pxe_server_hostname }}/distro/gparted-live-{{ gparted_live_version }}-amd64/live/initrd.img 
imgargs vmlinuz boot=live config components union=overlay username=user noswap noeject vga=788 fetch=http://{{ pxe_server_hostname }}/distro/gparted-live-{{ gparted_live_version }}-amd64/live/filesystem.squashfs
boot || goto failed
goto start
{% endif %}
###################### OTHER DISTROS ####################################

{% if "windows" in pxe_distro %}
:windows
echo Starting Microsoft Windows ${arch} installer
kernel http://{{ pxe_server_hostname }}/winpeboot/AMD64/wimboot
initrd ${win-base-url}/AMD64/bootmgr                     bootmgr
initrd ${win-base-url}/AMD64/Boot/BCD                    BCD
initrd ${win-base-url}/AMD64/Boot/Fonts/segmono_boot.ttf segmono_boot.ttf
initrd ${win-base-url}/AMD64/Boot/Fonts/segoe_slboot.ttf segoe_slboot.ttf
initrd ${win-base-url}/AMD64/Boot/Fonts/wgl4_boot.ttf    wgl4_boot.ttf
initrd ${win-base-url}/AMD64/Boot/boot.sdi               boot.sdi
initrd ${win-base-url}/AMD64/boot.wim                    boot.wim
boot || goto failed
goto start

:dart
echo Starting Microsoft Diagnostics and Recovery Toolkit (${arch})
kernel http://{{ pxe_server_hostname }}/winpeboot/AMD64/wimboot
initrd ${dart-base-url}/bootmgr                     bootmgr
initrd ${dart-base-url}/Boot/BCD                    BCD
initrd ${dart-base-url}/Boot/Fonts/segmono_boot.ttf segmono_boot.ttf
initrd ${dart-base-url}/Boot/Fonts/segoe_slboot.ttf segoe_slboot.ttf
initrd ${dart-base-url}/Boot/Fonts/wgl4_boot.ttf    wgl4_boot.ttf
initrd ${dart-base-url}/Boot/boot.sdi               boot.sdi
initrd ${dart-base-url}/boot.wim                    boot.wim
boot || goto failed
goto start
{% endif %}

:memtest
chain http://{{ pxe_server_hostname }}/tools/MEMTEST${archefi}.EFI
boot || goto failed
goto start

:efishell
chain http://{{ pxe_server_hostname }}/tools/SHELL${archefi}.EFI
boot || goto failed
goto start

:sub-older
menu Older System Installers...
item --key 0x08 back      Back to top menu...
item
{% if "windows" in pxe_distro %}
item windows8             Install Windows 8.1
item windows7             Install Windows 7
item winvista             Install Windows Vista
{% endif %}
{% if "winlegacy" in pxe_distro %}
item winxp                Install Windows XP
{% endif %}

iseq ${menu-default} menu-install && isset ${submenu-default} && goto menu-install-timed ||
choose selected && goto ${selected} || goto start
:menu-install-timed
choose --timeout ${submenu-timeout} --default ${submenu-default} selected && goto ${selected} || goto start